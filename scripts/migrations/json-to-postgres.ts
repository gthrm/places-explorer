import fs from 'fs';
import path from 'path';
import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface VenueProperties {
  Name: string;
  description: string | null;
}

interface VenueGeometry {
  type: string;
  coordinates: [number, number, number];
}

interface VenueFeature {
  type: string;
  properties: VenueProperties;
  geometry: VenueGeometry;
}

interface VenueCollection {
  type: string;
  name: string;
  features: VenueFeature[];
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥–æ—Ä–æ–¥–∞
const CATEGORIES = [
  { id: "all", name: "–í—Å—ë", icon: "üåê", color: "bg-emerald-500" },
  { id: "–ë–∞—Ä", name: "–ë–∞—Ä—ã", icon: "üç∏", color: "bg-purple-500" },
  { id: "–ï–¥–∞", name: "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", icon: "üçΩÔ∏è", color: "bg-red-500" },
  { id: "–ú–∞–≥–∞–∑–∏–Ω—ã", name: "–ú–∞–≥–∞–∑–∏–Ω—ã", icon: "üõí", color: "bg-blue-500" },
  { id: "–ö—Ä–∞—Å–æ—Ç–∞", name: "–ö—Ä–∞—Å–æ—Ç–∞", icon: "üíá", color: "bg-pink-500" },
  { id: "–û–¥–µ–∂–¥–∞", name: "–û–¥–µ–∂–¥–∞", icon: "üëï", color: "bg-green-500" },
  { id: "–¢–µ—Ö–Ω–∏–∫–∞", name: "–¢–µ—Ö–Ω–∏–∫–∞", icon: "üì±", color: "bg-gray-500" },
  { id: "–ö–æ–≤–æ—Ä–∫–∏–Ω–≥–∏", name: "–ö–æ–≤–æ—Ä–∫–∏–Ω–≥–∏", icon: "üè¢", color: "bg-yellow-500" },
  { id: "–ö—É—Ä—Å—ã", name: "–ö—É—Ä—Å—ã", icon: "üìö", color: "bg-indigo-500" },
  { id: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", icon: "üé≠", color: "bg-orange-500" },
  { id: "–†–∞–∑–Ω–æ–µ", name: "–†–∞–∑–Ω–æ–µ", icon: "üîç", color: "bg-teal-500" },
];

const CITIES = [
  { id: "BG", name: "–ë–µ–ª–≥—Ä–∞–¥" },
  { id: "NS", name: "–ù–æ–≤–∏-–°–∞–¥" },
  { id: "Mitrovica", name: "–ú–∏—Ç—Ä–æ–≤–∏—Ü–∞" },
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
const prisma = new PrismaClient();

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å JSON-—Ñ–∞–π–ª–∞–º–∏
const DATA_DIR = path.join(process.cwd(), 'public', 'data');

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞
 */
async function readJsonFile(filePath: string): Promise<VenueCollection> {
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(fileContent) as VenueCollection;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
    return {
      type: "FeatureCollection",
      name: "",
      features: []
    };
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –≥–æ—Ä–æ–¥–∞–º–∏
 */
async function initializeDatabase() {
  try {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const category of CATEGORIES) {
      await prisma.category.upsert({
        where: { id: category.id },
        update: {
          name: category.name,
          icon: category.icon,
          color: category.color
        },
        create: {
          id: category.id,
          name: category.name,
          icon: category.icon,
          color: category.color
        }
      });
    }
    
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤...');
    
    // –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞
    for (const city of CITIES) {
      await prisma.city.upsert({
        where: { id: city.id },
        update: { name: city.name },
        create: {
          id: city.id,
          name: city.name
        }
      });
    }
    
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function migrateJsonToDatabase(categoryId: string) {
  try {
    console.log(`–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}...`);
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const filePath = path.join(DATA_DIR, `${categoryId}.geojson`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(filePath)) {
      console.log(`–§–∞–π–ª ${filePath} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
      return;
    }
    
    // –ß–∏—Ç–∞–µ–º JSON-—Ñ–∞–π–ª
    const geoJson = await readJsonFile(filePath);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –º–µ—Å—Ç–æ
    for (const feature of geoJson.features) {
      await processFeature(feature, categoryId);
    }
    
    console.log(`–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
 */
async function processFeature(feature: VenueFeature, categoryId: string) {
  try {
    const { Name, description } = feature.properties;
    const coordinates = feature.geometry.coordinates;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ)
    const nameParts = Name.split(' ');
    const cityId = nameParts[0];
    const name = nameParts.slice(1).join(' ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥
    const city = await prisma.city.findUnique({
      where: { id: cityId }
    });
    
    // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
    const finalCityId = city ? cityId : CITIES[0].id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Å—Ç–æ —Å —Ç–∞–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    const existingPlace = await prisma.place.findFirst({
      where: {
        latitude: coordinates[1],
        longitude: coordinates[0]
      }
    });
    
    if (existingPlace) {
      console.log(`–ú–µ—Å—Ç–æ ${Name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
      return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
    let imageUrl = null;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
    // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã –∏ —É–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const fileName = Name.replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    const imagePath = path.join(process.cwd(), 'public', 'images', 'venues', `${fileName}.svg`);
    if (fs.existsSync(imagePath)) {
      imageUrl = `/images/venues/${fileName}.svg`;
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JPG
      const jpgPath = path.join(process.cwd(), 'public', 'images', 'venues', `${fileName}.jpg`);
      if (fs.existsSync(jpgPath)) {
        imageUrl = `/images/venues/${fileName}.jpg`;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
    await prisma.place.create({
      data: {
        name,
        description,
        imageUrl,
        latitude: coordinates[1],
        longitude: coordinates[0],
        altitude: coordinates[2] || 0,
        categoryId,
        cityId: finalCityId
      }
    });
    
    console.log(`–ú–µ—Å—Ç–æ ${Name} –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–∞ ${feature.properties.Name}:`, error);
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 */
async function migrateAllData() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initializeDatabase();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö JSON-—Ñ–∞–π–ª–æ–≤
    const files = fs.readdirSync(DATA_DIR).filter(file => file.endsWith('.geojson'));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const file of files) {
      const categoryId = path.basename(file, '.geojson');
      await migrateJsonToDatabase(categoryId);
    }
    
    console.log('–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await prisma.$disconnect();
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
  migrateAllData().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  });
} 